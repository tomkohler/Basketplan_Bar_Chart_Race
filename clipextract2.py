# import the necessary packages
from imutils import contours
import numpy as np
import imutils
import cv2
import pandas as pd
import youtube_dl
import datetime
from pathlib import Path
import ffmpy
from PIL import Image, ImageFont, ImageDraw
import os
from shutil import copyfile

os.environ['DISPLAY'] = ':0'

def write_titleimage (msg1, msg2, msg3, msg4, fpth, fname, pwidth, pheight, length):
    # write image title jpg
    W, H = (pwidth, pheight)
    fnt1 = ImageFont.truetype('arial.ttf', 60)
    fnt2 = ImageFont.truetype('arial.ttf', 48)
    # create new image
    image = Image.new("RGB", (W, H), "black")
    draw = ImageDraw.Draw(image)
    w1, h1 = draw.textsize(msg1, font=fnt1)
    w2, h2 = draw.textsize(msg2, font=fnt2)
    w3, h3 = draw.textsize(msg3, font=fnt2)
    w4, h4 = draw.textsize(msg4, font=fnt2)
    draw.text(((W - w1) / 2, (H - h1) / 2 - 100), msg1, font=fnt1, fill="white")
    draw.text(((W - w2) / 2, (H - h2) / 2 - 25), msg2, font=fnt2, fill="white")
    draw.text(((W - w3) / 2, (H - h3) / 2 + 25), msg3, font=fnt2, fill="white")
    draw.text(((W - w4) / 2, (H - h4) / 2 + 75), msg4, font=fnt2, fill="white")
    image.save(fpth + '/' + fname + '.jpg')

    # make mp4 title screen
    ff = ffmpy.FFmpeg(inputs={fpth + '/' + fname + '.jpg': '-y -loop 1 -t ' + str(length)},
                      outputs={fpth + '/' + fname + '.mp4': None})
    ff.cmd
    ff.run()
    os.remove(fpth + '/' + fname + '.jpg')

def calc_params(gt):
    # INPUT: gametime, which is a float variable counting down the gametime from 40 mins
    # OUTPUT: array with [quarter, minutes, seconds], all as integers
    # EXAMPLE: 9.25 is in 4th quarter, 9th minute and 15th second (0.25 * 60)
    gametimeasc = float(gt)
    if gametimeasc < 0:
        gametimeasc = 0
    # handle the special case of the last second
    if int(gametimeasc / 10) == gametimeasc / 10:
        qt = int(gametimeasc / 10)
        mm = 0
        ss = 0
    else:
        qt = int(gametimeasc / 10) + 1
        if qt > 4:
            qt = 4
        # updated allow the quarter zero to avoid a pattern match in pre-game
        elif qt < 0:
            qt = 0
        mm = int((qt * 10) - gametimeasc)
        if (mm < 0):
            mm = 0
        elif (mm > 40):
            mm = 40
        ss = int((1-(gametimeasc - int(gametimeasc))) * 60)
        if (ss < 0):
            ss = 0
        elif (ss > 59):
            ss = 59
        #print(str(GameTime) + "-" + str(gametimeasc) + "-" + str(quarter) + "-" + str(minutes).zfill(2) + ":" + str(
        #    seconds).zfill(2))
    return [qt, mm, ss]

def compare_result(fxquarter, fxminutes, fxseconds, quarter, minutes, seconds, tolerance):
    # INPUT: inputarray is an array with [quarter, gametime], gametime as mmss (mm=minutes ss=seconds)
    # INPUT: quarter, minutes, seconds are integers
    # OUTPUT: resultcode depending on what is found (described further below)
    # validate input
    if (tolerance < 0 or tolerance > 10):
        tolerance = 0
    if (fxquarter == quarter):
        # quarter correct
        if (fxminutes == minutes):
            # quarter, minutes correct
            if ( (fxseconds >= (seconds - tolerance)) and (fxseconds <= (seconds + tolerance)) ):
                # quarter, minutes, seconds correct
                result = 10
            elif (seconds > fxseconds):
                # quarter, minutes correct, but target seconds are further forward in stream
                result = 3
            else:
                # quarter, minutes correct, but target seconds are further back in stream
                result = -3
        elif (minutes > fxminutes):
            # quarter correct, but target minutes are further forward in stream
            result = 2
        else:
            # quarter correct, but target minutes are further forward in stream
            result = -2
    elif (quarter > fxquarter):
        # target quarter is further forward in stream
        result = -1
    else:
        # target quarter is further back in stream
        result = 1
    return result

def validate_result(fq, fm, fs, lfq, lfm, lfs, rc, ad, tl):
    # initialise plausibility code
    pc = 1

    if debug != 0:
        print("actual: " + str(fq) + " " + str(fm).zfill(2) + ":" + str(fs).zfill(2) + " - previous: " + str(lfq) + " " + str(lfm).zfill(2) + ":" + str(lfs).zfill(2))

    # illegal input values
    if (fq < 1 or fq > 4 or fm < 0 or fm > 59 or fs < 0 or fs > 59):
        pc = 0
    else:
        # tolerance factor
        tol = 5
        # if the resultcode is positive then we are moving backward in the stream
        # hence the quarter can only be the same or decrease
        # hence the time can only increase, if it does not, then drop this read
        if rc > 0:
            # if quarter is the same and new minutes smaller
            if (fq == lfq):
                # calculate the deviation in seconds due to counter shift (add)
                adsec = ad / 24
                tsec = lfm * 60 + lfs + adsec * tol
                asec = fm * 60 + fs
                # if the actual time is bigger than the theoretical one from the jump, then error
                if asec > tsec:
                    pc = 0
                elif (fm < lfm):
                    pc = 0
            # in case that the minutes appear correct (new minutes bigger than old ones) but the quarter is off, then correct quarter
            elif (fm >= lfm):
                pc = 2
            # if quarter is bigger
            elif fq > lfq:
                pc = 0
            # if quarter is jumping by more than 1
            elif (fq < (lfq - 1)):
                pc = 0
        # if the resultcode is negative then we are moving forward in the stream
        # hence the quarter can only be the same or increase
        # hence the time can only decrease, if it does not, then drop this read
        elif rc < 0:
            # if quarter is the same and new minutes bigger
            if (fq == lfq):
                # calculate the deviation in seconds due to counter shift (add)
                adsec = ad / 24
                tsec = lfm * 60 + lfs - adsec * tol
                asec = fm * 60 + fs
                if asec < tsec:
                    pc = 0
                elif (fm > lfm):
                    pc = 0
            # in case that the minutes appear correct (new minutes smaller than old ones) but the quarter is off, then correct quarter
            elif (fm <= lfm):
                pc = 2
            # if quarter is smaller
            elif fq < lfq:
                pc = 0
            # if quarter is jumping by more than 1
            elif (fq > (lfq + 1)):
                pc = 0
    return pc

def evaluate_frame(fr, tp):
    # INPUT: cv2 frame, tp is integer indicating the type of panel if already identified otherwise 0, umm is 1 when we look for time under 1 minute
    # OUTPUT: resultarray

    mm = -1
    ss = -1
    qt = -1

    # swissbaskettv panel on xsplit
    if (tp == 0 or tp == 1):
        # get and evaluate
        extr_gametime = get_gametime(frame, 975, 609, 80, 35, 0, 0)
        # print(
        #     "VL: " + str(row['VideoLink']) + " -- Counter: " + str(count) + " -- Type: " + str(
        #         type) + " -- Gametime: " + extr_gametime + " -> " + str(len(extr_gametime)))
        # take into account that there might be no leading zero
        if (len(extr_gametime) >= 3  and len(extr_gametime) <= 4):
            # validation (special code here as there can be 3 and 4 digits)
            # definitely a mm:ss format
            if (len(extr_gametime) == 4 and (extr_gametime >= '0000' and extr_gametime <= '6000')):
                mm = int(extr_gametime[0:2])
                ss = int(extr_gametime[2:4])
                if (mm >= 0 and mm <= 60 and ss >= 0 and ss <= 59):
                    tp = 1

            # can be mm:ss format or ss.x format (we assume that when we search for a value < 1 min that it's ss.x
            elif (len(extr_gametime) == 3 and (extr_gametime >= '000' and extr_gametime <= '999')):
                mm = int(extr_gametime[0:1])
                ss = int(extr_gametime[1:3])
                if (mm >= 0 and mm <= 9 and ss >= 0 and ss <= 59):
                    tp = 1

            # print("Min: " + str(mm) + " Sec: " + str(ss))

            if (mm != -1 and ss != -1):
                # two variant, one for the manual version the other for the scorebug
                extr_quarter = get_gametime(frame, 937, 614, 15, 25, 0, 0)
                if (extr_quarter >= '0' and extr_quarter <= '4'):
                    if (extr_quarter > '0'):
                        qt = int(extr_quarter)
                else:
                    extr_quarter = get_gametime(frame, 906, 609, 20, 35, 0, 0)
                    if (extr_quarter >= '0' and extr_quarter <= '4'):
                        if (extr_quarter > '0'):
                            qt = int(extr_quarter)
                # print("Quarter: " + extr_quarter + " qt: "+ str(qt))

    # villars panel on xsplit
    if (tp == 0 or tp == 9):
        # get and evaluate
        extr_gametime = get_gametime(frame, 980, 640, 80, 25, 0, 0)
        # print(
        #     "VL: " + str(row['VideoLink']) + " -- Counter: " + str(count) + " -- Type: " + str(
        #         type) + " -- Gametime: " + extr_gametime + " -> " + str(len(extr_gametime)))
        # take into account that there might be no leading zero
        if (len(extr_gametime) >= 3 and len(extr_gametime) <= 4):
            # validation (special code here as there can be 3 and 4 digits)
            # definitely a mm:ss format
            if (len(extr_gametime) == 4 and (extr_gametime >= '0000' and extr_gametime <= '6000')):
                mm = int(extr_gametime[0:2])
                ss = int(extr_gametime[2:4])
                if (mm >= 0 and mm <= 60 and ss >= 0 and ss <= 59):
                    tp = 9

            # can be mm:ss format or ss.x format (we assume that when we search for a value < 1 min that it's ss.x
            elif (len(extr_gametime) == 3 and (extr_gametime >= '000' and extr_gametime <= '999')):
                mm = int(extr_gametime[0:1])
                ss = int(extr_gametime[1:3])
                if (mm >= 0 and mm <= 9 and ss >= 0 and ss <= 59):
                    tp = 9

            # print("Min: " + str(mm) + " Sec: " + str(ss))

            if (mm != -1 and ss != -1):
                # two variant, one for the manual version the other for the scorebug
                extr_quarter = get_gametime(frame, 935, 640, 15, 25, 0, 0)
                if (extr_quarter >= '0' and extr_quarter <= '4'):
                    if (extr_quarter > '0'):
                        qt = int(extr_quarter)
                else:
                    extr_quarter = get_gametime(frame, 935, 640, 15, 25, 0, 0)
                    if (extr_quarter >= '0' and extr_quarter <= '4'):
                        if (extr_quarter > '0'):
                            qt = int(extr_quarter)
                # print("Quarter: " + extr_quarter + " qt: "+ str(qt))

    # tvgraphics panel on keemotion
    if (tp == 0 or tp == 2):
        # get and evaluate
        extr_gametime = get_gametime(frame, 565, 648, 55, 25, 0, 0)
        # print(
        #     "VL: " + str(row['VideoLink']) + " -- Counter: " + str(count) + " -- Type: " + str(
        #         type) + " -- Gametime: " + extr_gametime)
        if (len(extr_gametime) == 4):
            # validation
            if (extr_gametime >= '0000' and extr_gametime <= '1000'):
                mm = int(extr_gametime[0:2])
                ss = int(extr_gametime[2:4])
                if (mm >= 0 and mm <= 10 and ss >= 0 and ss <= 59):
                    tp = 2

                extr_quarter = get_gametime(frame, 669, 645, 17, 30, 0, 0)
                if (len(extr_quarter) == 1):
                    if (extr_quarter >= '1' and extr_quarter <= '4'):
                        qt = int(extr_quarter)

##    # default keemotion panel (Nyon)
##    if (tp == 0 or tp == 4):
##        # get and evaluate
##        extr_gametime = get_gametime(frame, 540, 645, 60, 30, 0, 0)
##        #print("gametime:")
##        #print(extr_gametime)
##        # print(
##        #     "VL: " + str(row['VideoLink']) + " -- Counter: " + str(count) + " -- Type: " + str(
##        #         type) + " -- Gametime: " + extr_gametime)
##        if (len(extr_gametime) == 4):
##            # validation
##            if (extr_gametime >= '0000' and extr_gametime <= '1000'):
##                mm = int(extr_gametime[0:2])
##                ss = int(extr_gametime[2:4])
##                if (mm >= 0 and mm <= 10 and ss >= 0 and ss <= 59):
##                    tp = 4
##
##                extr_quarter = get_gametime(frame, 669, 648, 15, 25, 0, 0)
##                if (len(extr_quarter) == 1):
##                    if (extr_quarter >= '1' and extr_quarter <= '4'):
##                        qt = int(extr_quarter)

    # tvgraphics panel on xsplit
    if (tp == 0 or tp == 3):
        # get and evaluate
        extr_gametime = get_gametime(frame, 540, 645, 60, 30, 0, 0)
        # print(
        #     "VL: " + str(row['VideoLink']) + " -- Counter: " + str(count) + " -- Type: " + str(
        #         type) + " -- Gametime: " + extr_gametime)
        if (len(extr_gametime) == 4):
            # validation
            if (extr_gametime >= '0000' and extr_gametime <= '1000'):
                mm = int(extr_gametime[0:2])
                ss = int(extr_gametime[2:4])
                if (mm >= 0 and mm <= 10 and ss >= 0 and ss <= 59):
                    tp = 3

                extr_quarter = get_gametime(frame, 669, 648, 17, 25, 0, 0)
                if (len(extr_quarter) == 1):
                    if (extr_quarter >= '1' and extr_quarter <= '4'):
                        qt = int(extr_quarter)

    # old sbtv panel on keemotion (important, only panel where colors need to be inverted)
    if (tp == 0 or tp == 5):
        # get and evaluate
        extr_gametime = get_gametime(frame, 906, 631, 42, 18, 1, 0)
        # print(
        #     "VL: " + str(row['VideoLink']) + " -- Counter: " + str(count) + " -- Type: " + str(
        #         type) + " -- Gametime: " + extr_gametime)
        if (len(extr_gametime) == 4):
            # validation
            if (extr_gametime >= '0000' and extr_gametime <= '1000'):
                mm = int(extr_gametime[0:2])
                ss = int(extr_gametime[2:4])
                if (mm >= 0 and mm <= 10 and ss >= 0 and ss <= 59):
                    tp = 5

                extr_quarter = get_gametime(frame, 876, 631, 12, 18, 1, 0)
                if (len(extr_quarter) == 1):
                    if (extr_quarter >= '1' and extr_quarter <= '4'):
                        qt = int(extr_quarter)

    return [qt, mm, ss, tp]

def read_reference_font(filename):
    # load the reference font image from disk, convert it to grayscale,
    # and threshold it, such that the digits appear as *white* on a
    # *black* background
    # and invert it, such that the digits appear as *white* on a *black*
    ref = cv2.imread(filename)
    ref = cv2.cvtColor(ref, cv2.COLOR_BGR2GRAY)
    ref = cv2.threshold(ref, 10, 255, cv2.THRESH_BINARY_INV)[1]

    # find contours in the reference image (i.e,. the outlines of the digits)
    # sort them from left to right, and initialize a dictionary to map
    # digit name to the ROI
    refCnts = cv2.findContours(ref.copy(), cv2.RETR_EXTERNAL,
                               cv2.CHAIN_APPROX_SIMPLE)
    refCnts = imutils.grab_contours(refCnts)
    refCnts = contours.sort_contours(refCnts, method="left-to-right")[0]

    # loop over the reference font  contours
    for (i, c) in enumerate(refCnts):
        # compute the bounding box for the digit, extract it, and resize
        # it to a fixed size
        (x, y, w, h) = cv2.boundingRect(c)
        roi = ref[y:y + h, x:x + w]
        roi = cv2.resize(roi, (57, 88))
        # update the digits dictionary, mapping the digit name to the ROI
        digits[i] = roi

    return True

def get_gametime(img, x1, y1, w1, h1, invert, show):
    # convert to grey and apply threshold
    img = img[y1:y1 + h1, x1:x1 + w1]
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    # flag to see if we need to invert the frame or not
    if invert == 0:
        thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
    else:
        thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]
    if show == 1:
        cv2.imshow('frame', thresh)
        cv2.waitKey(1)

    # find contours in the thresholded image, then initialize the
    # list of digit locations
    groupOutput = ''
    digitCnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    digitCnts = imutils.grab_contours(digitCnts)
    # avoid sorting digits with a count of 0 which leads to an error in sort_contours
    if len(digitCnts) > 0:
        digitCnts = contours.sort_contours(digitCnts, method="left-to-right")[0]
        # loop over the digit contours
        for c in digitCnts:
            # compute the bounding box of the individual digit, extract
            # the digit, and resize it to have the same fixed size as
            # the reference OCR-A images
            (x, y, w, h) = cv2.boundingRect(c)
            # eliminate smaller dots
            if (h > 5 and h < 20 and w > 3 and w < 20):
                roi = thresh[y:y + h, x:x + w]
                roi = cv2.resize(roi, (57, 88))
                # initialize a list of template matching scores
                scores = []
                # loop over the reference digit name and digit ROI
                for (digit, digitROI) in digits.items():
                    # apply correlation-based template matching, take the
                    # score, and update the scores list
                    result = cv2.matchTemplate(roi, digitROI, cv2.TM_CCOEFF)
                    (_, score, _, _) = cv2.minMaxLoc(result)
                    scores.append(score)
                # the classification for the digit ROI will be the reference
                # digit name with the *largest* template matching score
                groupOutput += str(np.argmax(scores))
    return groupOutput

inclusionlist = {89,92,94,98,99,100,102,103,107,108,202,203,231,235,247,269,270,392,393,394,395,397,441,512,513,514,515,516,517,518,519,520,540,624,629,630,634,639,690,691,692,693,755,802,803,804,967,977,978,981,992,993,994,995,996,997,998,999,1000,1001,1003,1004,1005,1007,1009,1010,1011,1016,1018,1019,1020,1034,1050,1059,1067,1069,1127,1180,1181,1182,1183,1185,1186,1187,1188,1189,1213,1246,1247,1297,1298,1299,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1619,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1636,1654,1655,1657,1663,1665,1666,1667,1677,1716,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1822,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1953,1954,1962,1978,1981,1982,1983,1984,1985,1986,2040,2041,2042,2043,2080,2081,2190,2191,2234,2264,2302,2312,2313,2315,2316,2317,2318,2319,2320,2321,2322,2348,2355,2356,2357,2358,2359,2360,2361,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2514,2518,2543,2544,2548,2555,2557,2558,2560,2562,2565,2570,2571,2574,2576,2577,2579,2581,2644,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2706,2793,2795,2851,2854,2858,2868,2876,2881,2888,2901,2902,2903,2904,2905,2911,2961,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3081,3087,3100,3126,3128,3186,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3316,3374,3375,3378,3387,3390,3391,3393,3394,3395,3397,3400,3401,3403,3404,3407,3410,3412,3413,3416,3417,3419,3420,3427,3428,3455,3456,3457,3692,3865,3880,3881,3882,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4288,4289,4304,4344,4345,4346,4347,4364,4391,4392,4397,4401,4405,4432,4439,4440,4441,4455,4456,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4628,4629,4630,4631,4632,4633,4634,4635,4636,4672,4673,4683,4790,4803,4833,4835,4837,4840,4842,4843,4845,4852,4857,4858,4867,4869,4871,4872,4873,4874,4886,4927,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943,4944,4945,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,5011,5012,5014,5016,5021,5024,5026,5033,5035,5037,5040,5045,5050,5087,5099,5103,5105,5107,5108,5110,5112,5119,5136,5137,5141,5142,5143,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5243,5252,5253,5254,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5306,5311,5326,5350,5357,5358,5359,5360,5366,5377,5379,5388,5389,5390,5401,5402,5405,5406,5407,5408,5410,5411,5412,5413,5414,5474,5476,5479,5481,5486,5487,5488,5490,5491,5493,5494,5496,5501,5504,5505,5508,5520,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633,5634,5635,5636,5637,5638,5639,5642,5643,5644,5684,5712,5735,5736,5739,5748,5750,5751,5754,5755,5756,5758,5761,5763,5765,5766,5767,5769,5776,5778,5784,5787,5788,5789,5791,5793,5795,5796,5798,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5919,5961,5962,5963,6005,6015,6020,6021,6022,6023,6024,6139,6140,6141,6142,6143,6234,6239,6244,6245,6255,6281,6282,6283,6284,6285,6286,6295,6377,6378,6379,6380,6381,6382,6421,6422,6423,6427,6448,6472,6474,6480,6481,6482,6485,6487,6488,6489,6490,6491,6492,6493,6494,6497,6500,6506,6508,6509,6510,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6534,6535,6537,6538,6539,6540,6541,6542,6543,6545,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6770,6771,6788,6795,6796,6867,6868,6875,6882,6883,6886,6887,6893,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6911,6915,6916,6918,6919,6920,6921,6922,6944,6945,6966,6973,7020,7021,7022,7023,7024,7025,7026,7027,7029,7031,7040,7047,7049,7051,7054,7056,7057,7062,7063,7132,7133,7134,7135,7137,7143,7161,7162,7163,7202,7213,7214,7215,7217,7219,7220,7221,7223,7238,7250,7262,7265,7266,7274,7276,7277,7278,7279,7281,7282,7283,7284,7287,7290,7292,7293,7296,7298,7299,7301,7302,7305,7307,7308,7311,7313,7316,7317,7321,7324,7325,7326,7328,7330,7331,7338,7339,7342,7344,7345,7346,7398,7401,7402,7412,7415,7416,7419,7465,7466,7467,7468,7469,7470,7471,7472,7473,7474,7475,7476,7477,7478,7479,7486,7526,7527,7545,7568,7587,7588,7589,7590,7611,7622,7623,7624,7625,7643,7644,7645,7646,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7739,7740,7760,7762,7763,7764,7771,7791,7795,7796,7797,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7830,7831,7832,7833,7834,7835,7836,7837,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7852,7855,7857,7864,7866,7867,7868,7869,7870,7871,7872,7874,7876,7877,7880,7884,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7904,7907,7908,7909,7910,7979,7980,7981,7982,7983,7984,7985,7986,7987,7995,8004,8007,8010,8026,8031,8032,8037,8050,8098,8099,8100,8105,8109,8111,8113,8114,8115,8116,8117,8121,8124,8125,8129,8133,8138,8139,8141,8142,8143,8144,8147,8149,8150,8151,8152,8153,8154,8155,8156,8159,8161,8180,8186,8187,8198,8201,8202,8203,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255,8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8304,8310,8315,8317,8318,8321,8323,8324,8325,8327,8330,8331,8332,8333,8336,8337,8338,8339,8340,8341,8342,8343,8346,8347,8348,8349,8350,8351,8353,8354,8355,8356,8357,8358,8359,8360,8361,8365,8366,8367,8368,8369,8372,8373,8374,8375,8376,8377,8378,8379,8380,8381,8382,8383,8402,8419,8445,8446,8447,8456,8458,8466,8469,8483,8487,8488,8489,8490,8491,8492,8493,8494,8495,8496,8497,8498,8499,8504,8505,8506,8509,8511,8513,8514,8515,8516,8520,8524,8528,8529,8538,8540,8541,8542,8543,8544,8545,8546,8547,8548,8549,8550,8557,8577,8594,8743,8775,8839,8840,8841,8842,8899,8900,8903,8914,8937,8948,8998,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040,9041,9042,9043,9044,9045,9046,9047,9048,9049,9050,9051,9052,9053,9054,9055,9056,9057,9058,9059,9060,9061,9149,9170,9185,9249,9252,9254,9255,9262,9265,9271,9274,9278,9280,9283,9287,9289,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9398,9399,9400,9401,9402,9403,9404,9405,9410,9411,9412,9413,9414,9432,9440,9444,9448,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9516,9518,9519,9524,9525,9526,9527,9528,9535,9537,9541,9542,9543,9544,9545,9550,9603,9616,9625,9671,9676,9709,9714,9715,9716,9720,9724,9742,9776,9777,9778,9779,9781,9783,9786,9788,9795,9796,9809,9810,9817,9822,9823,9824,9825,9826,9827,9828,9829,9830,9831,9832,9833,9834,9835,9836,9837,9838,9839,9840,9841,9842,9843,9844,9845,9846,9847,9848,9849,9850,9851,9852,9853,9854,9855,9856,9857,9858,9859,9860,9861,9862,9863,9864,9865,9866,9867,9868,9869,9870,9871,9872,9873,9874,9875,9876,9877,9878,9879,9880,9881,9882,9883,9884,9885,9886,9887,9888,9889,9890,9891,9892,9893,9894,9895,9896,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,9916,9917,9918,9919,9920,9921,9922,9923,9924,9926,9927,9928,9934,9935,9943,9946,9948,9949,9961,9968,9969,9973,9977,9978,9979,9980,9981,9982,10036,10040,10044,10045,10046,10047,10048,10050,10051,10052,10053,10054,10057,10060,10061,10062,10064,10065,10066,10073,10075,10076,10077,10078,10081,10082,10083,10084,10085,10086,10087,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10102,10103,10104,10105,10106,10107,10108,10109,10110,10111,10112,10113,10114,10115,10116,10117,10118,10119,10120,10121,10122,10123,10126,10130,10182,10183,10184,10188,10189,10190,10191,10196,10202,10211,10216,10218,10219,10227,10233,10235,10236,10239,10240,10241,10242,10243,10244,10245,10246,10247,10248,10249,10250,10251,10252,10253,10254,10255,10256,10257,10258,10259,10260,10261,10262,10263,10264,10265,10266,10267,10268,10269,10270,10271,10272,10273,10274,10275,10276,10277,10278,10279,10280,10281,10282,10283,10284,10285,10286,10287,10288,10289,10290,10291,10292,10293,10294,10295,10296,10297,10298,10351,10352,10355,10357,10360,10361,10371,10383,10398,10400,10405,10406,10407,10408,10409,10410,10411,10412,10413,10414,10415,10416,10417,10418,10419,10420,10421,10422,10423,10424,10425,10426,10427,10428,10429,10430,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10498,10499,10500,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10555,10556,10557,10558,10559,10560,10561,10562,10563,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,10590,10591,10592,10598,10599,10603,10618,10624,10625,10626,10627,10661,10663,10664,10666,10667,10671,10674,10675,10676,10677,10681,10683,10686,10687,10693,10695,10701,10703,10708,10716,10717,10719,10720,10721,10722,10735,10736,10750,10776,10777,10778,10779,10780,10781,10782,10783,10784,10792,10803,10806,10898,10899,10900,10901,10903,10917,10928,10929,10940,10941,10942,10943,10944,10945,10946,10947,10948,10949,10950,10951,10952,10953,10954,10955,10956,10957,10958,10959,10960,10961,10962,10963,10964,10965,10966,10967,10968,10969,10970,10971,10972,10973,10974,10975,10976,10977,10978,10979,10980,10981,10982,10983,10984,10985,10986,10987,10988,10989,10990,10991,10992,10993,10994,10995,11052,11053,11054,11055,11056,11057,11058,11059,11060,11061,11062,11063,11064,11065,11069,11070,11072,11073,11074,11076,11081,11082,11089,11090,11100,11101,11107,11111,11112,11113,11178,11179,11180,11181,11182,11183,11184,11185,11186,11187,11188,11189,11190,11191,11192,11193,11194,11195,11196,11197,11198,11199,11200,11201,11202,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11227,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11240,11241,11242,11243,11244,11245,11246,11247,11248,11249,11250,11251,11252,11253,11279,11288,11296,11297,11298,11299,11300,11306,11324,11344,11360,11361,11362,11404,11410,11418,11419,11420,11421,11422,11423,11424,11431,11447,11470,11475,11476,11477,11478,11482,11483,11515,11524,11530,11532,11538,11540,11541,11542,11543,11544,11545,11546,11547,11548,11549,11550,11551,11552,11553,11554,11555,11556,11557,11558,11559,11560,11563,11575,11576,11577,11578,11579,11580,11581,11582,11583,11585,11586,11587,11588,11590,11592,11595,11600,11601,11602,11603,11604,11605,11608,11609,11610,11611,11612,11613,11614,11615,11616,11617,11618,11619,11620,11621,11623,11626,11630,11631,11633,11635,11638,11640,11642,11643,11645,11648,11649,11651,11652,11654,11656,11657,11658,11664,11665,11668,11669,11672,11673,11676,11678,11679,11680,11682,11683,11687,11688,11689,11690,11691,11692,11693,11694,11695,11696,11697,11698,11699,11700,11701,11702,11703,11704,11705,11706,11707,11708,11709,11710,11711,11712,11713,11714,11715,11716,11717,11718,11719,11720,11721,11722,11723,11724,11725,11726,11727,11728,11729,11730,11731,11732,11733,11734,11736,11738,11740,11741,11754,11760,11762,11764,11765,11769,11771,11773,11775,11778,11781,11809,11810,11831,11835,11836,11842,11843,11846,11847,11848,11860,11861,11862,11863,11864,11865,11866,11867,11868,11869,11880,11905,11906,11907,11921,11932,11937,11941,11943,11950,11959,11963,11964,12014,12015,12016,12017,12018,12019,12020,12021,12022,12023,12024,12025,12026,12027,12028,12029,12030,12031,12032,12033,12034,12035,12036,12037,12038,12039,12040,12041,12042,12043,12044,12045,12046,12047,12048,12049,12050,12051,12052,12053,12054,12055,12056,12057,12058,12059,12060,12061,12062,12063,12064,12133,12135,12136,12140,12141,12142,12145,12147,12148,12149,12151,12152,12153,12155,12159,12161,12163,12165,12166,12170,12171,12174,12176,12178,12180,12182,12183,12185,12186,12190,12191,12192,12193,12194,12195,12196,12197,12198,12199,12200,12201,12202,12203,12204,12205,12206,12207,12208,12209,12220,12221,12222,12235,12254,12266,12267,12268,12412,12413,12414,12415,12416,12417,12418,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12483,12484,12485,12494,12498,12509,12510,12512,12520,12577,12578,12624,12647,12676,12677,12678,12679,12681,12684,12687,12691,12692,12698,12699,12700,12701,12702,12703,12704,12705,12706,12707,12708,12709,12710,12711,12712,12713,12714,12715,12716,12717,12718,12719,12720,12721,12722,12723,12730,12731,12732,12733,12736,12737,12738,12739,12740,12741,12742,12743,12744,12745,12746,12747,12748,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12760,12761,12762,12763,12764,12765,12766,12767,12768,12769,12770,12771,12772,12773,12774,12775,12776,12777,12778,12779,12780,12781,12782,12783,12784,12785,12786,12787,12788,12789,12790,12791,12792,12793,12794,12795,12796,12797,12798,12803,12804,12806,12807,12808,12809,12812,12816,12818,12822,12826,12829,12830,12837,12839,12840,12842,12843,12849,12858,12861,12889,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,12924,12925,12926,12927,12928,12929,12930,12931,12932,12933,12934,12935,12936,12937,12938,12939,12940,12941,12942,12943,12944,12950,12951,12980,12992,13002,13003,13004,13005,13006,13007,13008,13009,13010,13011,13012,13013,13014,13015,13016,13017,13018,13019,13020,13021,13022,13023,13024,13025,13026,13027,13028,13029,13030,13031,13032,13033,13034,13035,13036,13037,13038,13039,13040,13041,13042,13043,13044,13045,13046,13047,13048,13049,13050,13101,13109,13110,13111,13116,13117,13118,13119,13120,13121,13122,13123,13124,13125,13126,13127,13128,13129,13130,13131,13132,13133,13134,13135,13136,13137,13138,13139,13142,13144,13145,13146,13147,13148,13149,13150,13151,13152,13155,13156,13157,13158,13159,13160,13161,13162,13163,13164,13165,13166,13167,13168,13169,13170,13171,13172,13173,13174,13175,13176,13177,13178,13179,13180,13181,13182,13183,13184,13185,13186,13187,13188,13189,13190,13191,13192,13193,13194,13195,13196,13197,13198,13199,13200,13201,13202,13219,13245,13316,13317,13318,13319,13320,13321,13322,13323,13324,13325,13326,13327,13328,13329,13330,13331,13332,13333,13334,13335,13336,13337,13338,13339,13340,13341,13342,13343,13344,13345,13346,13347,13348,13349,13350,13351,13352,13353,13354,13355,13356,13357,13358,13359,13360,13361,13362,13363,13364,13365,13366,13367,13368,13369,13370,13371,13372,13373,13374,13375,13376,13377,13378,13379,13380,13381,13382,13383,13384,13385,13386,13387,13388,13389,13390,13391,13392,13393,13394,13395,13396,13397,13398,13399,13400,13401,13402,13403,13404,13405,13406,13407,13408,13409,13410,13411,13412,13413,13414,13415,13416,13417,13421,13424,13425,13429,13432,13436,13437,13438,13441,13444,13445,13446,13448,13449,13450,13453,13454,13455,13456,13457,13458,13459,13460,13461,13462,13463,13464,13465,13466,13467,13468,13469,13470,13471,13472,13473,13474,13475,13476,13477,13478,13479,13480,13481,13482,13483,13484,13485,13486,13487,13488,13489,13490,13491,13492,13493,13494,13495,13496,13497,13498,13499,13500,13501,13502,13503,13504,13505,13506,13558,13559,13560,13561,13562,13565,13566,13569,13570,13571,13574,13577,13578,13579,13580,13581,13582,13583,13584,13585,13587,13588,13590,13593,13595,13597,13598,13600,13601,13606,13607,13609,13610,13611,13612,13614,13615,13617,13618,13619,13620,13649,13650,13673,13674,13676,13779,13782,13818,13821,13822,13823,13824,13825,13826,13827,13828,13829,13830,13831,13832,13833,13834,13835,13836,13837,13838,13839,13840,13841,13842,13843,13844,13845,13846,13847,13848,13849,13850,13851,13852,13853,13854,13855,13856,13857,13858,13859,13860,13861,13862,13863,13864,13865,13866,13867,13868,13869,13870,13871,13872,13873,13874,13875,13876,13877,13878,13879,13880,13881,13882,13883,13884,13885,13886,13887,13888,13889,13920,13933,13934,13935,13936,13937,13938,13939,13940,13941,13942,13943,13944,13945,13946,13947,13948,13949,13950,13951,13952,13953,13954,13955,13956,13957,13958,13959,13960,13961,13962,13963,13964,13965,13966,13967,13968,13969,13970,13971,13972,13973,13974,13975,13976,13977,13978,13979,14029,14032,14033,14034,14035,14036,14037,14038,14039,14040,14041,14042,14043,14044,14045,14046,14047,14048,14049,14050,14051,14052,14053,14054,14055,14056,14057,14058,14059,14060,14061,14062,14063,14064,14065,14066,14067,14068,14069,14070,14071,14072,14073,14074,14075,14076,14077,14078,14079,14080,14081,14082,14083,14084,14085,14086,14087,14088,14089,14090,14091,14092,14093,14094,14095,14096,14097,14098,14099,14100,14101,14102,14103,14104,14105,14106,14107,14108,14109,14126,14127,14132,14142,14146,14147,14148,14149,14150,14153,14157,14180,14184,14185,14191,14193,14200,14201,14210,14229,14230,14291,14300,14302,14310,14319,14327,14335,14339,14340,14355,14356,14400,14401,14402,14414,14451,14452,14453,14463,14471,14472,14477,14479,14491,14504,14505,14506,14507,14508,14509,14510,14511,14512,14513,14514,14515,14516,14517,14518,14519,14520,14521,14522,14523,14524,14525,14526,14527,14528,14529,14530,14531,14532,14533,14534,14535,14536,14537,14538,14539,14540,14541,14542,14543,14544,14545,14546,14547,14548,14549,14550,14551,14552,14553,14554,14605,14645,14646,14665,14673,14674,14678,14706,14707,14709,14718,14719,14720,14721,14724,14729,14732,14733,14734,14735,14737,14738,14740,14741,14744,14747,14749,14751,14752,14754,14757,14758,14759,14760,14762,14764,14766,14775,14776,14777,14778,14779,14780,14781,14782,14783,14784,14785,14786,14787,14788,14789,14790,14791,14792,14793,14794,14795,14796,14797,14798,14799,14800,14801,14802,14803,14804,14805,14806,14807,14808,14809,14810,14811,14812,14813,14814,14815,14816,14817,14818,14819,14820,14821,14822,14823,14824,14825,14828,14829,14831,14842,14846,14851,14863,14864,14900,14901,14902,14916,14926,14927,14944,14945,14946,14983,14996,14997,14998,14999,15004,15005,15012,15013,15019,15020,15021,15022,15023,15024,15025,15026,15027,15028,15029,15030,15031,15032,15033,15034,15035,15036,15037,15038,15039,15040,15041,15042,15043,15044,15045,15046,15047,15048,15049,15050,15051,15052,15053,15054,15055,15056,15057,15058,15059,15060,15061,15062,15063,15064,15065,15066,15067,15068,15069,15070,15071,15072,15073,15074,15075,15076,15077,15078,15079,15080,15081,15082,15083,15084,15085,15086,15087,15088,15089,15090,15091,15092,15093,15094,15095,15096,15097,15098,15099,15100,15101,15105,15110,15112,15113,15114,15115,15116,15117,15118,15119,15120,15121,15122,15123,15124,15125,15126,15127,15128,15129,15130,15131,15132,15133,15134,15135,15136,15137,15138,15139,15140,15141,15142,15143,15144,15146,15150,15161,15174,15175,15176,15177,15178,15179,15180,15181,15182,15183,15184,15185,15186,15187,15188,15189,15190,15191,15192,15193,15194,15195,15196,15197,15198,15199,15200,393,394,420,426,431,437,462,476,477,487,512,513,514,515,516,517,518,519,520,540,566,573,574,634,639,690,691,692,693,708,711,721,725,728,730,731,733,746,748,753,755,870,967,977,978,981,992,993,994,995,996,997,998,999,1000,1001,1003,1004,1005,1024,1032,1034,1078,1079,1088,1089,1092,1093,1099,1100,1118,1121,1122,1127,1213,1247,1297,1298,1299,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1437,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1620,1630,1991,1996,2008,2023,2025,2029,2153,2159,2169,2178,2180,2183,2185,2192,2195,2198,2234,2321,2348,2361,2365,2366,2367,2372,2373,2374,2474,2475,2557,2560,2644,2884,2886,2896,2897,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3311,3312,3313,3316,3390,3947,3950,3951,3953,3955,3956,3957,3958,3959,3960,3961,3993,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4364,4423,4424,4523,4535,4672,5107,5110,5136,5306,5350,5359,5360,5476,5479,5488,5493,5593,5754,5755,5793,5795,5868,6234,6379,6517,6518,6519,6906,6918,6919,6920,6921,6922,7132,7133,7134,7135,7137,7143,7161,7162,7163,7220,7301,7302,7305,7415,7416,7588,7589,7729,7771,7901,7904,7907,7908,7909,7910,8227,8229,8230,8232,8234,8235,8236,8242,8243,8318,8341,8350,8356,8357,8365,8372,8373,8374,8419,8469,8494,8498,8506,8509,8515,8528,9003,9004,9005,9006,9007,9384,9399,9400,9413,9414,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9535,9537,9541,9542,9543,9544,9545,9550,9603,9616,9625,9776,9777,9778,9779,9826,9827,9828,9829,9830,9831,9832,9833,9834,9835,9836,9837,9838,9839,9840,9841,9842,9843,9861,9862,9863,9864,9908,9909,9913,10089,10262,10411,10499,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10591,10603,10675,10782,10783,10784,10806,10929,11072,11089,11107,11194,11195,11196,11197,11198,11199,11200,11201,11202,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11227,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11240,11241,11242,11243,11244,11245,11246,11247,11404,11410,11418,11419,11420,11421,11422,11423,11424,11515,11550,11575,11576,11577,11578,11579,11580,11581,11583,11603,11604,11610,11619,11651,11672,11733,11809,11810,11843,12036,12041,12042,12057,12062,12063,12064,12163,12254,12268,12484,12512,12684,12701,12702,12703,12710,12736,12737,12738,12739,12740,12741,12742,12743,12744,12745,12746,12747,12748,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12760,12761,12762,12763,12764,12765,12766,12767,12768,12769,12770,12771,12772,12773,12774,12775,12776,12777,12778,12779,12780,12781,12782,12783,12784,12785,12786,12787,12788,12789,12790,12791,12792,12793,12794,12795,12796,12797,12798,12913,12980,13005,13006,13007,13008,13009,13010,13011,13012,13013,13014,13015,13016,13017,13018,13019,13020,13021,13022,13023,13024,13025,13026,13027,13028,13029,13030,13031,13032,13033,13034,13035,13036,13037,13038,13039,13040,13041,13042,13043,13044,13045,13046,13047,13048,13049,13050,13202,13245,13316,13317,13318,13319,13320,13321,13322,13323,13383,13384,13453,13454,13455,13456,13457,13458,13459,13460,13461,13462,13463,13464,13465,13466,13467,13468,13469,13470,13471,13472,13473,13474,13475,13476,13477,13478,13479,13480,13481,13482,13483,13484,13485,13486,13487,13488,13489,13490,13491,13492,13493,13494,13495,13496,13497,13498,13499,13558,13560,13562,13571,13577,13582,13583,13588,13590,13593,13595,13597,13600,13601,13607,13617,13618,13619,13676,13782,14034,14035,14036,14037,14038,14039,14040,14041,14042,14043,14044,14045,14046,14047,14048,14049,14050,14051,14052,14053,14054,14055,14056,14057,14058,14059,14060,14061,14062,14063,14064,14065,14066,14067,14068,14069,14070,14071,14072,14073,14074,14075,14076,14077,14078,14079,14080,14081,14082,14083,14084,14085,14157,14191,14402,14741,14744,14751,14764,14831,15113,15141,15177,15178,15179,15180,15181}
digits = {}
debug = 0

origpath = '/var/www/html/grabber/'

# reference font sbtv
#read_reference_font(origpath + 'Condensed_Reference_Image.jpg')
read_reference_font(origpath + 'Rubik_Reference_Image.jpg')
# datafile
data = pd.read_csv(origpath + 'data3.csv', encoding='iso-8859-1')
pd.set_option('display.max_columns', None)
data2 = data.sort_values(['VideoLink', 'GameTime'], ascending=[True, True])
# extract only actions with points scores
data3 = data2[data2['ActionType'].str.contains('pt_r')]
#print(data3)
# write to disk

# seconds before and after the action to be clipped
cliplead = 10
cliptrail = 5

# iterate through results
pVideoLink = ''
nextURL = 0
sequence = 0
starter = 1
ydl_opts = {'ignoreerrors': True}
for index, row in data3.iterrows():
    # if URL was not parsed so far, then parse it
    starter += 1
    if starter >= 2 and starter <= 16000 and (starter in inclusionlist):
        videolink = row['VideoLink']
        videolink = videolink[0:11]
        count = 0
        if (videolink != pVideoLink):
            nextURL = 0
            ytfilename = 'https://www.youtube.com/watch?v=' + str(videolink)
            # create youtube-dl object
            ydl = youtube_dl.YoutubeDL(ydl_opts)
            # set video url, extract video information
            info_dict = ydl.extract_info(ytfilename, download=False)
            pVideoLink = videolink
            sequence = 0

        # continue either with new filename or old one
        if (nextURL == 0):
            # get variables from iterrow()
            pastcount = []
            playername = row['PlayerName']
            league = row['League']
            clubshort = row['ClubShort']
            actiontype = row['ActionType']
            subtype = row['SubType']
            miss1 = 0
            miss2 = 0
            miss3 = 0
            type = 0
            resultcode = 0
            if (info_dict != None):
                #print(info_dict)
                # get video formats available
                formats = info_dict.get('formats', None)
                for f in formats:
                    # 720p format usable by CV2
                    if f.get('format_id', None) == '22':
                        # get the video url
                        url = f.get('url', None)
                        # open url with opencv
                        cap = cv2.VideoCapture(url)

                        # check if url was opened
                        if not cap.isOpened():
                            print('video not opened')
                            exit(-1)

                        # calculate to which quarter and time to move
                        GameTime = row['GameTime']
                        gamenumber = row['GameNumber']
                        hometeam = row['HClubShort']
                        guestteam = row['GClubShort']
                        gamedate = row['Date']
                        quartertimearray = calc_params(GameTime)
                        # quarter, minutes, seconds values for targeted clip
                        dbquarter = quartertimearray[0]
                        dbminutes = quartertimearray[1]
                        dbseconds = quartertimearray[2]

                        print(
                            "Looking for: " + league + "-" + clubshort + "-" + playername + "_" + actiontype + "-" + subtype + "-" + str(
                                dbquarter) + "-" + str(dbminutes).zfill(2) + ":" + str(dbseconds).zfill(2))

                        # check if filename is already existing and the operations can be skipped
                        filepath = origpath + "dataframes/"
                        temppath = filepath + "temp2"
                        filepath += playername.replace(" ",
                                                       "") + "/" + league + "_" + gamenumber + "_" + hometeam + "_vs_" + guestteam
                        filename = playername.replace(" ",
                                                      "") + "-" + clubshort + "_" + hometeam + "_vs_" + guestteam + "_" + videolink
                        filename2 = filename
                        filename += "_" + actiontype + "-" + subtype + "-Q" + str(dbquarter) + "-" + str(dbminutes).zfill(
                            2) + str(dbseconds).zfill(2)

                        outputfilename = origpath + "dataframes/"
                        outputfilename += "NF_" + gamenumber + "_" + hometeam + "_vs_" + guestteam + "_" + videolink + "_" + league + "-" + clubshort + "-" + playername.replace(
                            " ", "")
                        outputfilename += "-Q" + str(dbquarter) + "-" + str(dbminutes).zfill(2) + str(
                            dbseconds).zfill(2) + ".jpg"

                        my_file1 = Path(filepath+'/'+filename+'_seg.mp4')
                        my_file2 = Path(outputfilename)

                        fquarter = -1
                        fminutes = -1
                        fseconds = -1
                        plausicode = 1
                        add = 0

                        if not(my_file1.is_file()) and not(my_file2.is_file()):
                            # look until the end of file
                            while True:
                                # read frame
                                if (debug != 0):
                                    print("Framecount: " + str(count))

                                ret, frame = cap.read()
                                # if frame is not ok
                                if not ret:
                                    # if error go an fetch next line
                                    f = open(origpath + 'linecount.txt', "a")
                                    # starttime to measure throughput time for algorithm
                                    starttime = datetime.datetime.now()
                                    f.write(str(starttime) + "-" + str(starter).zfill(6) + ": " + str(count).zfill(6) + "- Error in Cap.Read() when seeking clip\r")
                                    f.close()
                                    # error message
                                    if (debug != 0):
                                        print("Cap Read Error at count: " + str(count))
                                    # updated, no longer nextURL = 1
                                    count -= 20000
                                    nextURL = 0
                                    if (count < 0 or miss3 > 10):
                                        break
                                    else:
                                        miss1 += 3

                                # if frame is ok
                                else:
                                    if (plausicode > 0):
                                        # save previously found values, otherwise keep former ones
                                        lastfquarter = fquarter
                                        lastfminutes = fminutes
                                        lastfseconds = fseconds

                                    # evaluate the current frame
                                    resultarray = evaluate_frame(frame, type)
                                    fquarter = resultarray[0]
                                    fminutes = resultarray[1]
                                    fseconds = resultarray[2]
                                    type = resultarray[3]
                                    if (debug != 0):
                                        print("Evaluate Frame with results: " + str(fquarter) + " " + str(fminutes).zfill(2) + ":" + str(fseconds).zfill(2))
                                    #print ("Resultarray - Q"+str(fquarter)+"_"+str(fminutes).zfill(2)+":"+str(fseconds).zfill(2)+"_"+str(type))

                                    # individual correction
                                    if (fquarter == -1 and type == 2):
                                        fquarter = 3

                                    # evaluation of search strategy
                                    # if one of the values is not well read (meaning -1)
                                    if (fquarter == -1 or fminutes == -1 or fseconds == -1):
                                        # avoid that -1 are becoming the former value (except on the first run)
                                        plausicode = 0
                                        # if previous code existing
                                        if (resultcode == 0):
                                            # avoid looping at the beginning
                                            if count <= 0:
                                                count = 50000
                                        else:
                                            # let algorithm continue searching if under x glitches
                                            if (miss3 < 10):
                                                miss3 += 1
                                            else:
                                                # put the counter somewhere else and give a 2nd chance
                                                miss3 = 0
                                                count = 100000

                                    # if all values are positive
                                    else:
                                        # if found check tolerance make it bigger for sbtv solution
                                        if type == 1:
                                            tol = 4
                                        else:
                                            tol = 3

                                        if (lastfquarter == -1 and lastfminutes == -1 and lastfseconds == -1):
                                            # in the first run, there is no plausibility check possible as no previous values
                                            plausicode = 1
                                        else:
                                            # if there is a direct hit, no need for further checks
                                            if (fquarter == dbquarter and fminutes == dbminutes and fseconds >= dbseconds - tol and fseconds <= dbseconds + tol):
                                                plausicode = 1
                                            else:
                                                # plausibility checks of the new results
                                                plausicode = validate_result(fquarter, fminutes, fseconds, lastfquarter, lastfminutes, lastfseconds, resultcode, add, tol)
                                                # correct quarter
                                                if (plausicode == 2):
                                                    fquarter = lastfquarter

                                        if debug != 0:
                                            print("Last Q" + str(lastfquarter) + " " + str(lastfminutes).zfill(2) + ":" + str(lastfseconds).zfill(2) + " Plausi -> " + str(plausicode))

                                        # in case plausibility check ok, proceed, otherwise move forward with same resultcode
                                        if (plausicode > 0):
                                            resultcode = compare_result(fquarter, fminutes, fseconds, dbquarter, dbminutes, dbseconds, tol)
                                        else:
                                            if debug != 0:
                                                print("Plausibility check failed. Dropped\r")

                                        if debug != 0:
                                            print("Frame: " + str(fquarter) + "-" + str(fminutes).zfill(2) + ":" + str(fseconds).zfill(
                                                2) + "; DB: " + str(dbquarter) + "-" + str(dbminutes).zfill(2) + ":" + str(dbseconds).zfill(
                                                2) + "; Type: " + str(type) + "; RCode: "+ str(resultcode))

                                    if (resultcode == 0):
                                        # nothing found
                                        add = 10000
                                        count += add
                                        miss1 += 1
                                    elif (resultcode == -1):
                                        # quarter found but target quarter earlier
                                        add = 5000
                                        count += add
                                        miss2 += 1
                                    elif (resultcode == -2):
                                        # quarter correct but target minutes earlier
                                        gap = fminutes - dbminutes
                                        if gap > 5:
                                            add = 2000
                                            count += add
                                        elif gap > 2:
                                            add = 1000
                                            count += add
                                        else:
                                            add = 500
                                            count += add
                                        miss2 += 1
                                    elif (resultcode == -3):
                                        # quarter and minutes correct but target seconds earlier
                                        # calculate gap
                                        gap = fseconds - dbseconds
                                        if gap > 30:
                                            add = 220
                                            count += add
                                        elif gap > 15:
                                            add = 110
                                            count += add
                                        else:
                                            add = 25
                                            count += add
                                        miss2 += 1
                                    elif (resultcode == 1):
                                        # quarter found but target quarter later
                                        count -= 4500
                                        miss2 += 1
                                    elif (resultcode == 2):
                                        # quarter correct but target minutes later
                                        gap = dbminutes - fminutes
                                        if gap > 5:
                                            add = 1800
                                            count -= add
                                        elif gap > 2:
                                            add = 900
                                            count -= add
                                        else:
                                            add = 450
                                            count -= add
                                        miss2 += 1
                                    elif (resultcode == 3):
                                        # quarter and minutes correct but target seconds later
                                        gap = dbseconds - fseconds
                                        if gap > 30:
                                            add = 200
                                            count -= add
                                        elif gap > 15:
                                            add = 100
                                            count -= add
                                        else:
                                            add = 15
                                            count -= add
                                        miss2 += 1
                                    elif (resultcode == 10):
                                        # found
                                        print("Found")

                                        Path(filepath).mkdir(parents=True, exist_ok=True)
                                        Path(temppath).mkdir(parents=True, exist_ok=True)

                                        # write clipseries
                                        clipstart = count - cliplead * 60
                                        if clipstart < 0:
                                            clipstart = 0

                                        for clipcount in range(clipstart, count + cliptrail * 60):
                                            cap.set(cv2.CAP_PROP_POS_FRAMES, clipcount)
                                            ret, frame = cap.read()
                                            if not ret:
                                                f = open(origpath + 'linecount.txt', "a")
                                                # starttime to measure throughput time for algorithm
                                                starttime = datetime.datetime.now()
                                                f.write(str(starttime) + "-" + str(starter).zfill(6) + ": " + str(
                                                    count).zfill(
                                                    6) + "- Error in Cap.Read() when writing clip series\r")
                                                f.close()
                                                break
                                            else:
                                                cv2.imwrite(
                                                    temppath + '/' + filename + '_' + str(clipcount).zfill(6) + '.jpg',
                                                    frame)

                                        # summarize all the jpg files in an mp4
                                        # print("output")
                                        ff = ffmpy.FFmpeg(inputs={
                                            temppath + '/' + filename + '_%6d.jpg': '-y -framerate 30 -start_number ' + str(
                                                clipstart).zfill(6)},
                                                          outputs={filepath + '/' + filename + '_seg.mp4': None})
                                        ff.cmd
                                        ff.run()

                                        # print("Sequence: "+str(sequence))
                                        if (sequence == 0):
                                            # write title image
                                            write_titleimage(playername, hometeam + " vs. " + guestteam,
                                                             "MatchNo: " + gamenumber,
                                                             gamedate, filepath, filename2 + "_title", 1280, 720, 1)
                                            # filelist.txt needed for full clipmerger
                                            # f = open('filelist.txt', "w")
                                            # f.write("file '" + filepath + "/" + filename2 + "_title.mp4'\r")
                                            # f.write("file '" + filepath + "/" + filename + "_seg.mp4'\r")
                                            # f.close()
                                        # else:
                                        # #     copyfile(filepath + "/" + filename2 + "_clip.mp4", filepath + "/" + filename2 + "_temp.mp4")
                                        # #     os.remove(filepath + "/" + filename2 + "_clip.mp4")
                                        #     f = open('filelist.txt', "w")
                                        #     f.write("file '" + filepath + "/" + filename2 + "_temp.mp4'\r")
                                        #     f.write("file '" + filepath + "/" + filename + "_seg.mp4'\r")
                                        #     f.close()
                                        # concat
                                        # # first time, just merge the title file into output clip
                                        # ff = ffmpy.FFmpeg(inputs={'filelist.txt': '-y -safe 0 -f concat'}, outputs={filepath + '/' + filename2 + '_clip.mp4': '-c copy'})
                                        # ff.cmd
                                        # ff.run()
                                        # os.remove(filepath + "/" + filename2 + "_temp.mp4")

                                        sequence += 1

                                        fp = os.listdir(temppath)
                                        for item in fp:
                                            if item.endswith(".jpg"):
                                                os.remove(os.path.join(temppath, item))
                                        # os.remove(filepath + '/' + 'out.mp4')
                                        # os.remove(filepath + '/' + 'title.mp4')



                                        nextURL = 0
                                        f = open(origpath + 'linecount.txt', "a")
                                        # starttime to measure throughput time for algorithm
                                        starttime = datetime.datetime.now()
                                        f.write(str(starttime) + "-" + str(starter).zfill(
                                            6) + ": " + "*** Clip successfully written\r")
                                        f.close()
                                        break

                                    # if too many misses
                                    if (miss1 > 100 or miss2 > 1000 or (pastcount.count(count) > 10)):
                                        #outputfilename += '_M1_' + str(miss1) + '_M2_' + str(miss2) + '_PC_' + str(
                                        #    pastcount.count(count))
                                        print("NOT Found")
                                        if debug != 0:
                                            print("NOT Found: " + outputfilename)
                                        cv2.imwrite(outputfilename, frame)

                                        if (pastcount.count(count) > 10):
                                            miss2 = 11000

                                    # move forward frames
                                    if count < 0:
                                        count = 0
                                    if debug != 0:
                                        print("Count: " + str(count) + " Miss1: " + str(miss1) + " Miss2: "+str(miss2)+ " PC: "+str(pastcount.count(count)))

                                    # avoid loops because of stream inconsistencies (ie falsely started matches etc.)
                                    pastcount.append(count)

                                    if (miss1 > 100):
                                        nextURL = 1
                                        f = open(origpath + 'linecount.txt', "a")
                                        # starttime to measure throughput time for algorithm
                                        starttime = datetime.datetime.now()
                                        f.write(str(starttime) + "-" + str(starter).zfill(6) + ": " + str(count).zfill(6) + "- too many misses1\r")
                                        f.close()
                                        break
                                    elif (miss2 > 300):
                                        nextURL = 0
                                        f = open(origpath + 'linecount.txt', "a")
                                        # starttime to measure throughput time for algorithm
                                        starttime = datetime.datetime.now()
                                        f.write(str(starttime) + "-" + str(starter).zfill(6) + ": " + str(count).zfill(6) + "- too many misses2\r")
                                        f.close()
                                        break

                                cap.set(cv2.CAP_PROP_POS_FRAMES, count)

                            # release VideoCapture
                            cap.release()
                        else:
                            print ("Exists... skipping")
                            f = open(origpath + 'linecount.txt', "a")
                            # starttime to measure throughput time for algorithm
                            starttime = datetime.datetime.now()
                            f.write(str(starttime) + "-" + str(starter).zfill(6) + ": " + str(count).zfill(6) + "- clip already exists - skipping\r")
                            f.close()
            # print time budget
            #print(datetime.datetime.now() - starttime)

    cv2.destroyAllWindows()
